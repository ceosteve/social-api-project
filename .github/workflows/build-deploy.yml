name: Build and Deploy Code
on: [push, pull_request]

jobs:
  job1:
    environment:
      name: Testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}_test
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRATION_TIME: ${{secrets.ACCESS_TOKEN_EXPIRATION_TIME}}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{secrets.DATABASE_USERNAME}}
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pull git repo
        uses: actions/checkout@v2
      
      - name: Install python 3.13.7
        uses: actions/setup-python@v2
        with:
          python-version: "3.13.7"
      - name: Update pip
        run: python -m pip install pip --upgrade pip
      
      - name: install dependencies
        run: pip install -r requirements.txt
      
      - name: Install pytest and run tests
        run: |
         pip install pytest pytest-asyncio pytest-cov
         pytest -v -s --maxfail=1 --disable-warnings
      
      - name: Login to Docker hub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
      
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Build and push
        id: docker_build
        uses: docker/build-push-actions@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{steps.buildx.outputs.name }}
          push: true
          tags: ${{secrets.DOCKER_HUB_USERNAME}}/fastapi:latest
          cache-from: type=local,scr-/tmp/.buildx-cache
          cache-to: type=local, dest=/tmp/.buildx.cache
      - name: Image digest
        run: echo ${{steps.docker_build.outputs.digest }}
        
      

